@model IEnumerable<SchoolApp.ViewModels.GroupIndexViewModel>

@{
    ViewBag.Title = "Группы";
}

<p>
    <a href="@Url.Action("Create")" class="btn btn-primary"><i class="icon-plus"></i> Добавить Группу</a>
</p>
@*<select id="userSelect" style="float:left;">
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="mercedes">Mercedes</option>
  <option value="audi">Audi</option>
</select>ace-settings-container
<a href="javascript:void(0);" id="addUser" style="float:left; display:inline; margin-left:2px;" class="btn btn-mini btn-warning"><i class="icon-plus"></i></a>*@
<span class="btn btn-small" id="trash" ondrop="dropTrash(this, event)" ondragover="return false" style="margin-right: 10px;"><i class="icon-trash icon-2x"></i></span>
<span id="dottedArea" class="label" style="background: none !important; border: 2px dashed gray; display:none; color:black; text-shadow:none;"></span>
<div class="table-header">Список групп</div>
<table class="table table-striped datatable">
    <thead>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model=>model.Students)
        </th>
        <th>
            @Html.DisplayNameFor(model=>model.Teachers)
        </th>
        <th></th>
    </thead>

@foreach (var item in Model) {
    <tr>
        @Html.HiddenFor(modelItem => item.GroupId)
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td  ondrop="dropStudent(this, event)" ondragenter="dragEnter(this,event)" ondragleave="dragLeave(this, event)" ondragover="return false">
            @foreach (var student in item.Students)
            {
                <span class="label label-info draggableStudent" data-studentId="@student.UserId" draggable="true" ondragend="dragEnd(this,event)" ondragstart="dragStudent(this,event)">@student.FullName</span>
            }
        </td>
        <td>
            @foreach (var teacher in item.Teachers)
            {
                <span class="label label-success">@teacher.FullName</span>
            }
        </td>
        <td>
			<a href="@Url.Action("Edit", new { id=item.GroupId })" rel="tooltip" data-toggle="tooltip" title="Edit group"><i class="icon-pencil"></i></a>
            <a href="@Url.Action("Details", new { id=item.GroupId })" rel="tooltip" data-toggle="tooltip" title="View details"><i class="icon-tasks"></i></a>
            <a href="@Url.Action("Delete", new { id=item.GroupId })" rel="tooltip" data-toggle="tooltip" title="Remove group"><i class="icon-remove"></i></a>
        </td>
    </tr>
}

</table>
<script type="text/javascript">

    $(document).ready(function () {
        $(".dataTables_filter").prepend($("#trash"));
    });
    var elements = [];
    var labelName;
    var oldGroupId;
    function dragEng(student, event) {
        $("#trash").removeClass("btn-danger");
    }
    function dragStudent(student, event) {
        $("#trash").addClass("btn-danger");
        oldGroupId = $(student).parent().parent().find("#item_GroupId").val();
        var index = elements.indexOf(student);
        if (index == -1) {
            // not already existing in the array, add it now
            elements.push(student);
            index = elements.length - 1;
        }
        labelName = student.innerHTML;
        event.dataTransfer.setData('Student', index);
    }
    function dropTrash(target, event) {
        var element = elements[event.dataTransfer.getData('Student')];
        var studentId = $(element).data('studentid');
        $.ajax({
            url: '@Url.Action("RemoveStudent")',
            type: 'POST',
            data: {
                GroupId: oldGroupId,
                studentId: studentId
            },
            success: function (data) {
                element.remove();
                noty({
                    text: "Сохранено",
                    type: "success",
                    timeout: 1000
                });
            },
            error: function () {
                noty({
                    text: "Ошибка при сохранении",
                    type: "error",
                    timeout: 1000
                });
            }
        });
    }
    function dropStudent(target, event) {
        $("#trash").removeClass("btn-danger");
        var newGroupId = $(target).parent().find("#item_GroupId").val();
        $(target).find('#dottedArea').hide();
        var element = elements[event.dataTransfer.getData('Student')];
        var studentId = $(element).data('studentid');
        target.appendChild(element);
        if (newGroupId != oldGroupId) {
            $.ajax({
                url: '@Url.Action("MoveStudent")',
                type: 'POST',
                 data: {
                     oldGroupId: oldGroupId,
                     newGroupId: newGroupId,
                     studentId: studentId
                 },
                 success: function (data) {
                     noty({
                         text: "Сохранено",
                         type: "success",
                         timeout: 1000
                     });
                 },
                 error: function () {
                     noty({
                         text: "Ошибка при сохранении",
                         type: "error",
                         timeout: 1000
                     });
                 }
             });
        }
    }
    function dragEnter(target, event) {
            var el = document.getElementById('dottedArea');
            $(el).show();
            $(el).text(labelName);
            target.appendChild(el);
    }
    function dragLeave(target, event) {
        $(target).find("#dottedArea").hide();
    }
</script>
<style type="text/css">
    [draggable] {
  -moz-user-select: none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  user-select: none;
  /* Required to make elements draggable in old WebKit */
  -khtml-user-drag: element;
  -webkit-user-drag: element;
}
.draggableStudent {
  cursor: move;
}

</style>